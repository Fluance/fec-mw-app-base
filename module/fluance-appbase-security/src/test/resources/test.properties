jwt.signing-algorithm.supported=RS256
jwt.signing-algorithm.unsupported=PS384
jwt.signing-algorithm.illegal=FAKE_ALGO
jwt.signing-algorithm.other=HS384

jwt.header={"alg":"${jwt.signing-algorithm.supported}","typ":"JWS"}

jwt.payload={"iss":"${app.jwt.issuer}", "key2":"value2", "key3":"value3"}

jwt.unsigned=${jwt.header}.${jwt.payload}.

jwt.type.other=JWE


























external-app.payload.valid=
external-app.payload.invalid=

external-app.jwt.not-compact-valid=
external-app.jwt.not-compact-invalid=

# Fail on signing algorithm
external-app.fail-on-signingalgo-unhandled.signing-algorithm= # Payload is valid, but JWT is requested as signed with unhandled but legal algorithm
external-app.fail-on-signingalgo-illegal.signing-algorithm= # Payload is valid, but JWT is requested as signed with illegal (thus unhandled) algorithm
# Succeed on signing algorithm
external-app.succeed-on-signingalgo-sameas-default.header= # In that case, payload is valid, JWT is requested as signed and algorithm is same as default (see security.properties)
external-app.succeed-on-signingalgo-difffrom-default.header= # Payload is valid, JWT is requested as signed and algorithm is different from default (see security.properties)